# Generated by Django 4.1.7 on 2023-05-01 20:15

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("nft_tokens", "0004_remove_page_application_form_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="collection",
            name="number",
            field=models.PositiveIntegerField(
                default=1, verbose_name="number"
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="pack",
            name="block",
            field=models.BooleanField(default=False, verbose_name="block"),
        ),
        migrations.AddField(
            model_name="token",
            name="block",
            field=models.BooleanField(default=False, verbose_name="block"),
        ),
        migrations.AddField(
            model_name="token",
            name="number",
            field=models.PositiveIntegerField(
                blank=True, null=True, verbose_name="number"
            ),
        ),
        # Код ниже добавлял самостоятельно, для внедрения триггера
        # который будет отвечать за нумерацию токенов в коллекциях
        migrations.RunSQL(
            sql="""
                CREATE SEQUENCE content.token_number_seq;
                """,
            reverse_sql="""
                DROP SEQUENCE IF EXISTS content.token_number_seq;
                """,
        ),
        migrations.RunSQL(
            sql="""
                CREATE OR REPLACE FUNCTION content.update_token_number()
                RETURNS TRIGGER AS $$
                BEGIN
                    NEW.number := (
                        SELECT COALESCE(MAX(number), 0)
                        FROM content.token
                        WHERE collection_id = NEW.collection_id
                    ) + 1;
                    RETURN NEW;
                END;
                $$ LANGUAGE plpgsql;

                CREATE TRIGGER update_token_number_trigger
                BEFORE INSERT ON content.token
                FOR EACH ROW
                EXECUTE FUNCTION content.update_token_number();
                """,
            reverse_sql="""
                DROP TRIGGER IF EXISTS update_token_number_trigger ON content.token;
                DROP FUNCTION IF EXISTS content.update_token_number();
                """,
        ),
        # TODO: оставил триггер для истории, при следующем коммите можно удалять
        # migrations.RunSQL(
        #     sql="""
        #         CREATE OR REPLACE FUNCTION content.update_token_number_on_delete()
        #         RETURNS TRIGGER AS $$
        #         DECLARE
        #             max_number INTEGER;
        #         BEGIN
        #             SELECT COALESCE(MAX(number), 0) INTO max_number
        #             FROM content.token
        #             WHERE collection_id = OLD.collection_id;
        #
        #             IF OLD.number < max_number THEN
        #                 UPDATE content.token
        #                 SET number = number - 1
        #                 WHERE collection_id = OLD.collection_id AND number > OLD.number;
        #
        #                 -- Обновляем последовательность
        #                 PERFORM setval('content.token_number_seq', max_number);
        #             RETURN OLD;
        #             END IF;
        #
        #             RETURN OLD;
        #         END;
        #         $$ LANGUAGE plpgsql;
        #
        #         CREATE TRIGGER update_token_number_on_delete_trigger
        #         AFTER DELETE ON content.token
        #         FOR EACH ROW
        #         EXECUTE FUNCTION content.update_token_number_on_delete();
        #         """,
        #     reverse_sql="""
        #         DROP TRIGGER IF EXISTS update_token_number_on_delete_trigger ON content.token;
        #         DROP FUNCTION IF EXISTS content.update_token_number_on_delete();
        #         """
        # ),
        migrations.RunSQL(
            sql="""
                CREATE OR REPLACE FUNCTION content.update_token_number_on_insert()
                RETURNS TRIGGER AS $$
                DECLARE
                    max_number INTEGER;
                BEGIN
                    SELECT COALESCE(MAX(number), 0) INTO max_number
                    FROM content.token
                    WHERE collection_id = NEW.collection_id;

                    IF NEW.number <= max_number THEN
                        UPDATE content.token
                        SET number = number + 1
                        WHERE collection_id = NEW.collection_id AND number >= NEW.number;

                        -- Обновляем последовательность
                        PERFORM setval('content.token_number_seq', max_number + 1)
                        WHERE NOT EXISTS (
                            SELECT 1
                            FROM content.token
                            WHERE collection_id = NEW.collection_id AND number = max_number + 1
                        );
                        ELSE
                    SELECT nextval('content.token_number_seq') INTO NEW.number;

                    -- Обновляем последовательность
                    PERFORM setval('content.token_number_seq', NEW.number)
                    WHERE NOT EXISTS (
                        SELECT 1
                        FROM content.token
                        WHERE collection_id = NEW.collection_id AND number = NEW.number
                    );
                END IF;

                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;

            CREATE TRIGGER update_token_number_on_insert_trigger
            BEFORE INSERT ON content.token
            FOR EACH ROW
            EXECUTE FUNCTION content.update_token_number_on_insert();
            """,
            reverse_sql="""
            DROP TRIGGER IF EXISTS update_token_number_on_insert_trigger ON content.token;
            DROP FUNCTION IF EXISTS content.update_token_number_on_insert();
            """,
        ),
    ]
