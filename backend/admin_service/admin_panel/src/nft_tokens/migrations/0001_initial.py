# Generated by Django 4.1 on 2023-02-03 23:49

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.RunSQL("CREATE SCHEMA IF NOT EXISTS content;"),
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "hide",
                    models.BooleanField(default=False, verbose_name="hide"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "link_opensea",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="link_opensea",
                    ),
                ),
                (
                    "link_discord",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="link_discord",
                    ),
                ),
                (
                    "link_instagram",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="link_instagram",
                    ),
                ),
                (
                    "link_medium",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="link_medium",
                    ),
                ),
                (
                    "link_twitter",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="link_twitter",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("standard", "Стандартный")],
                        default="standard",
                        max_length=20,
                        verbose_name="type",
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        upload_to="accounts/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["jpeg", "jpg", "png"]
                            )
                        ],
                        verbose_name="logo",
                    ),
                ),
                (
                    "cover",
                    models.ImageField(
                        upload_to="accounts/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["jpeg", "jpg", "png"]
                            )
                        ],
                        verbose_name="cover",
                    ),
                ),
                (
                    "banner",
                    models.ImageField(
                        upload_to="accounts/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["jpeg", "jpg", "png"]
                            )
                        ],
                        verbose_name="banner",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="name"
                    ),
                ),
                (
                    "url",
                    models.SlugField(
                        max_length=30, unique=True, verbose_name="url"
                    ),
                ),
                ("description", models.TextField(verbose_name="description")),
                (
                    "items_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="items count"
                    ),
                ),
                (
                    "owners_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="owners count"
                    ),
                ),
                (
                    "collections_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="collections count"
                    ),
                ),
                (
                    "floor_price_count",
                    models.DecimalField(
                        decimal_places=8,
                        default=0,
                        max_digits=15,
                        verbose_name="floor_price_count",
                    ),
                ),
                (
                    "volume_troded_count",
                    models.DecimalField(
                        decimal_places=8,
                        default=0,
                        max_digits=15,
                        verbose_name="volume_troded_count",
                    ),
                ),
                (
                    "profit",
                    models.DecimalField(
                        decimal_places=8,
                        default=0,
                        max_digits=15,
                        verbose_name="profit",
                    ),
                ),
            ],
            options={
                "verbose_name": "account",
                "verbose_name_plural": "accounts",
                "db_table": 'content"."account',
            },
        ),
        migrations.CreateModel(
            name="Blockchain",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="name"
                    ),
                ),
            ],
            options={
                "verbose_name": "blockchain",
                "verbose_name_plural": "blockchains",
                "db_table": 'content"."blockchain',
            },
        ),
        migrations.CreateModel(
            name="Collection",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "hide",
                    models.BooleanField(default=False, verbose_name="hide"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "link_opensea",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="link_opensea",
                    ),
                ),
                (
                    "link_discord",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="link_discord",
                    ),
                ),
                (
                    "link_instagram",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="link_instagram",
                    ),
                ),
                (
                    "link_medium",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="link_medium",
                    ),
                ),
                (
                    "link_twitter",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="link_twitter",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("standard", "Стандартный")],
                        default="standard",
                        max_length=20,
                        verbose_name="type",
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        upload_to="collections/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["jpeg", "jpg", "png"]
                            )
                        ],
                        verbose_name="logo",
                    ),
                ),
                (
                    "featured",
                    models.ImageField(
                        upload_to="collections/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["jpeg", "jpg", "png"]
                            )
                        ],
                        verbose_name="featured",
                    ),
                ),
                (
                    "banner",
                    models.ImageField(
                        upload_to="collections/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["jpeg", "jpg", "png"]
                            )
                        ],
                        verbose_name="banner",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="name"
                    ),
                ),
                (
                    "url",
                    models.SlugField(
                        max_length=30, unique=True, verbose_name="url"
                    ),
                ),
                (
                    "url_opensea",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="url_opensea",
                    ),
                ),
                (
                    "category_opensea",
                    models.CharField(
                        max_length=255, verbose_name="category_opensea"
                    ),
                ),
                (
                    "percentage_fee",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=15,
                        verbose_name="percentage_fee",
                    ),
                ),
                (
                    "display_theme",
                    models.CharField(
                        max_length=50, verbose_name="display_theme"
                    ),
                ),
                ("description", models.TextField(verbose_name="description")),
                (
                    "upload_blockchain",
                    models.BooleanField(
                        default=False, verbose_name="upload_blockchain"
                    ),
                ),
                (
                    "smart_contract_address",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="smart_contract_address",
                    ),
                ),
                (
                    "items_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="items count"
                    ),
                ),
                (
                    "owners_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="owners count"
                    ),
                ),
                (
                    "floor_price_count",
                    models.DecimalField(
                        decimal_places=8,
                        default=0,
                        max_digits=15,
                        verbose_name="floor_price_count",
                    ),
                ),
                (
                    "volume_troded_count",
                    models.DecimalField(
                        decimal_places=8,
                        default=0,
                        max_digits=15,
                        verbose_name="volume_troded_count",
                    ),
                ),
                (
                    "profit",
                    models.DecimalField(
                        decimal_places=8,
                        default=0,
                        max_digits=15,
                        verbose_name="profit",
                    ),
                ),
                (
                    "creator_profit",
                    models.DecimalField(
                        decimal_places=8,
                        default=0,
                        max_digits=15,
                        verbose_name="creator profit",
                    ),
                ),
                (
                    "creator_fee",
                    models.DecimalField(
                        decimal_places=8,
                        default=0,
                        max_digits=15,
                        verbose_name="creator fee",
                    ),
                ),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="nft_tokens.account",
                    ),
                ),
                (
                    "blockchain",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="nft_tokens.blockchain",
                    ),
                ),
            ],
            options={
                "verbose_name": "collection",
                "verbose_name_plural": "collections",
                "db_table": 'content"."collection',
            },
        ),
        migrations.CreateModel(
            name="CreatorRoyaltyDistribution",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "wallet",
                    models.CharField(max_length=255, verbose_name="wallet"),
                ),
                (
                    "percent",
                    models.DecimalField(
                        decimal_places=8,
                        default=0,
                        max_digits=15,
                        verbose_name="percent",
                    ),
                ),
            ],
            options={
                "verbose_name": "creator royalty distribution",
                "verbose_name_plural": "creator royalty distributions",
                "db_table": 'content"."creator_royalty_distribution',
            },
        ),
        migrations.CreateModel(
            name="CurrencyToken",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        max_length=10, unique=True, verbose_name="name"
                    ),
                ),
                (
                    "smart_contract_address",
                    models.CharField(
                        max_length=255, verbose_name="smart contract address"
                    ),
                ),
                (
                    "blockchain",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="nft_tokens.blockchain",
                    ),
                ),
            ],
            options={
                "verbose_name": "currency_token",
                "verbose_name_plural": "currency_tokens",
                "db_table": 'content"."currency_token',
            },
        ),
        migrations.CreateModel(
            name="IncomeDistribution",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "wallet",
                    models.CharField(max_length=255, verbose_name="wallet"),
                ),
                (
                    "percent",
                    models.DecimalField(
                        decimal_places=8,
                        default=0,
                        max_digits=15,
                        verbose_name="percent",
                    ),
                ),
            ],
            options={
                "verbose_name": "income distribution",
                "verbose_name_plural": "income distributions",
                "db_table": 'content"."income_distribution',
            },
        ),
        migrations.CreateModel(
            name="LevelsStats",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=50, verbose_name="name")),
                (
                    "type",
                    models.CharField(
                        choices=[("levels", "Levels"), ("stats", "Stats")],
                        max_length=6,
                        verbose_name="type",
                    ),
                ),
                (
                    "value_1",
                    models.PositiveIntegerField(verbose_name="value_1"),
                ),
                (
                    "value_2",
                    models.PositiveIntegerField(verbose_name="value_2"),
                ),
            ],
            options={
                "verbose_name": "levels_stats",
                "verbose_name_plural": "levels_stats",
                "db_table": 'content"."levels_stats',
            },
        ),
        migrations.CreateModel(
            name="Page",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "hide",
                    models.BooleanField(default=False, verbose_name="hide"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="name"
                    ),
                ),
                (
                    "application_form",
                    models.CharField(
                        default="basic",
                        max_length=255,
                        verbose_name="application form",
                    ),
                ),
                (
                    "number",
                    models.PositiveIntegerField(
                        unique=True, verbose_name="number"
                    ),
                ),
                (
                    "url",
                    models.SlugField(
                        max_length=30, unique=True, verbose_name="url"
                    ),
                ),
                (
                    "banner",
                    models.ImageField(
                        upload_to="pages/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["jpeg", "jpg", "png"]
                            )
                        ],
                        verbose_name="banner",
                    ),
                ),
                (
                    "icon",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="pages/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["svg", "png"]
                            )
                        ],
                        verbose_name="icon",
                    ),
                ),
                (
                    "title_1",
                    models.CharField(max_length=255, verbose_name="title_1"),
                ),
                ("description", models.TextField(verbose_name="description")),
                (
                    "title_2",
                    models.CharField(max_length=255, verbose_name="title_2"),
                ),
            ],
            options={
                "verbose_name": "page",
                "verbose_name_plural": "pages",
                "db_table": 'content"."page',
            },
        ),
        migrations.CreateModel(
            name="Properties",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(max_length=256, verbose_name="name"),
                ),
                ("type", models.CharField(max_length=50, verbose_name="type")),
            ],
            options={
                "verbose_name": "properties",
                "verbose_name_plural": "properties",
                "db_table": 'content"."properties',
            },
        ),
        migrations.CreateModel(
            name="SmartContract",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "administrator_address",
                    models.CharField(
                        max_length=255, verbose_name="administrator_address"
                    ),
                ),
                (
                    "address",
                    models.CharField(max_length=255, verbose_name="address"),
                ),
            ],
            options={
                "verbose_name": "smart contract",
                "verbose_name_plural": "smart contracts",
                "db_table": 'content"."smart_contract',
                "unique_together": {("administrator_address", "address")},
            },
        ),
        migrations.CreateModel(
            name="Pack",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "hide",
                    models.BooleanField(default=False, verbose_name="hide"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("standard", "Стандартный")],
                        default="standard",
                        max_length=20,
                        verbose_name="type",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="name"),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=8, max_digits=15, verbose_name="price"
                    ),
                ),
                (
                    "status_price",
                    models.CharField(
                        choices=[
                            ("auction", "Аукцион"),
                            ("no_price", "Цена не указана"),
                            ("price", "Цена указана"),
                        ],
                        default="price",
                        max_length=10,
                        verbose_name="status price",
                    ),
                ),
                (
                    "investor_royalty",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=15,
                        verbose_name="investor royalty",
                    ),
                ),
                (
                    "creator_royalty",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=15,
                        verbose_name="creator royalty",
                    ),
                ),
                ("description", models.TextField(verbose_name="description")),
                (
                    "close",
                    models.BooleanField(default=False, verbose_name="close"),
                ),
                (
                    "close_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="packs/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["jpeg", "jpg", "png"]
                            )
                        ],
                        verbose_name="close image",
                    ),
                ),
                (
                    "unlockable",
                    models.BooleanField(
                        default=False, verbose_name="unlockable"
                    ),
                ),
                (
                    "unlockable_content",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="unlockable content",
                    ),
                ),
                (
                    "upload_blockchain",
                    models.BooleanField(
                        default=False, verbose_name="upload blockchain"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("book", "Book"),
                            ("mint_1", "Mint 1"),
                            ("mint_2", "Mint 2"),
                            ("stop", "Stop"),
                        ],
                        default="stop",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "freeze",
                    models.BooleanField(default=False, verbose_name="freeze"),
                ),
                (
                    "wallet_owner",
                    models.CharField(
                        max_length=255, verbose_name="wallet_owner"
                    ),
                ),
                (
                    "items_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="items count"
                    ),
                ),
                (
                    "profit",
                    models.DecimalField(
                        decimal_places=8,
                        default=0,
                        max_digits=15,
                        verbose_name="profit",
                    ),
                ),
                (
                    "status_duration_date",
                    models.DateField(
                        default=datetime.date.today,
                        verbose_name="status_duration",
                    ),
                ),
                (
                    "collection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="nft_tokens.collection",
                    ),
                ),
                (
                    "creator_royalty_distribution",
                    models.ManyToManyField(
                        blank=True,
                        related_name="pack",
                        to="nft_tokens.creatorroyaltydistribution",
                    ),
                ),
                (
                    "currency_token",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="nft_tokens.currencytoken",
                    ),
                ),
                (
                    "income_distribution",
                    models.ManyToManyField(
                        blank=True,
                        related_name="pack",
                        to="nft_tokens.incomedistribution",
                    ),
                ),
                (
                    "levels_stats",
                    models.ManyToManyField(
                        blank=True,
                        related_name="pack",
                        to="nft_tokens.levelsstats",
                    ),
                ),
                (
                    "properties",
                    models.ManyToManyField(
                        blank=True,
                        related_name="pack",
                        to="nft_tokens.properties",
                    ),
                ),
            ],
            options={
                "verbose_name": "pack",
                "verbose_name_plural": "packs",
                "db_table": 'content"."pack',
            },
        ),
        migrations.AddField(
            model_name="collection",
            name="page",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="nft_tokens.page",
            ),
        ),
        migrations.AddField(
            model_name="collection",
            name="payment_tokens",
            field=models.ManyToManyField(
                related_name="collection", to="nft_tokens.currencytoken"
            ),
        ),
        migrations.AddField(
            model_name="account",
            name="page",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="nft_tokens.page",
            ),
        ),
        migrations.CreateModel(
            name="Token",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "hide",
                    models.BooleanField(default=False, verbose_name="hide"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("standard", "Стандартный")],
                        default="standard",
                        max_length=20,
                        verbose_name="type",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="name"),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=8, max_digits=15, verbose_name="price"
                    ),
                ),
                (
                    "status_price",
                    models.CharField(
                        choices=[
                            ("auction", "Аукцион"),
                            ("no_price", "Цена не указана"),
                            ("price", "Цена указана"),
                        ],
                        default="price",
                        max_length=10,
                        verbose_name="status price",
                    ),
                ),
                (
                    "investor_royalty",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=15,
                        verbose_name="investor royalty",
                    ),
                ),
                (
                    "creator_royalty",
                    models.DecimalField(
                        decimal_places=8,
                        max_digits=15,
                        verbose_name="creator royalty",
                    ),
                ),
                ("description", models.TextField(verbose_name="description")),
                (
                    "close",
                    models.BooleanField(default=False, verbose_name="close"),
                ),
                (
                    "close_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="packs/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["jpeg", "jpg", "png"]
                            )
                        ],
                        verbose_name="close image",
                    ),
                ),
                (
                    "unlockable",
                    models.BooleanField(
                        default=False, verbose_name="unlockable"
                    ),
                ),
                (
                    "unlockable_content",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="unlockable content",
                    ),
                ),
                (
                    "upload_blockchain",
                    models.BooleanField(
                        default=False, verbose_name="upload blockchain"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("book", "Book"),
                            ("mint_1", "Mint 1"),
                            ("mint_2", "Mint 2"),
                            ("stop", "Stop"),
                        ],
                        default="stop",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "freeze",
                    models.BooleanField(default=False, verbose_name="freeze"),
                ),
                (
                    "wallet_owner",
                    models.CharField(
                        max_length=255, verbose_name="wallet_owner"
                    ),
                ),
                (
                    "address",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="address",
                    ),
                ),
                (
                    "file_1",
                    models.FileField(
                        max_length=150,
                        upload_to="",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["jpg", "jpeg", "png", "mp4", "gif"]
                            )
                        ],
                        verbose_name="file_1",
                    ),
                ),
                (
                    "file_2",
                    models.FileField(
                        max_length=150,
                        upload_to="",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["jpg", "jpeg", "png", "mp4", "gif"]
                            )
                        ],
                        verbose_name="file_2",
                    ),
                ),
                (
                    "file_1_name_ext",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="file_1_name_ext",
                    ),
                ),
                (
                    "file_2_name_ext",
                    models.CharField(
                        blank=True,
                        max_length=150,
                        null=True,
                        verbose_name="file_2_name_ext",
                    ),
                ),
                (
                    "url_opensea",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="url_opensea",
                    ),
                ),
                (
                    "mint",
                    models.BooleanField(default=False, verbose_name="mint"),
                ),
                (
                    "profit",
                    models.DecimalField(
                        decimal_places=8,
                        default=0,
                        max_digits=15,
                        verbose_name="profit",
                    ),
                ),
                (
                    "collection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="nft_tokens.collection",
                    ),
                ),
                (
                    "creator_royalty_distribution",
                    models.ManyToManyField(
                        blank=True,
                        related_name="token",
                        to="nft_tokens.creatorroyaltydistribution",
                    ),
                ),
                (
                    "currency_token",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="nft_tokens.currencytoken",
                    ),
                ),
                (
                    "income_distribution",
                    models.ManyToManyField(
                        blank=True,
                        related_name="token",
                        to="nft_tokens.incomedistribution",
                    ),
                ),
                (
                    "levels_stats",
                    models.ManyToManyField(
                        blank=True,
                        related_name="token",
                        to="nft_tokens.levelsstats",
                    ),
                ),
                (
                    "pack",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="token",
                        to="nft_tokens.pack",
                    ),
                ),
                (
                    "properties",
                    models.ManyToManyField(
                        blank=True,
                        related_name="token",
                        to="nft_tokens.properties",
                    ),
                ),
            ],
            options={
                "verbose_name": "token",
                "verbose_name_plural": "tokens",
                "db_table": 'content"."token',
            },
        ),
    ]
